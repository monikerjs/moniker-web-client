#!/usr/bin/env node

var fs = require( 'fs' );
var path = require( 'path' );

var chokidar = require( 'chokidar' );
var argv = require( 'minimist' )( process.argv.slice( 2 ) );
var chalk = require( 'chalk' );
var less = require( 'less' );
var Flawless = require( 'flawless-compile' );
var autoprefixer = require( 'autoprefixer-core' );

var watchers = [];

/**
 * -i _Required_ main import file e.g. ./src/styles.less
 * -o _Required_ output file e.g. ./public/styles.css - if omitted pipes to stdout
 * -c _optional_ compression flag
 * _ _Required_ glob to watch
 */
// @example
// ./lesswatch ./src/**/glob-pattern*.less -i ./src/main.less -o ./public/main.css
// ./lesswatch ./src/**/*.less -i ./src/styles.less --suppress-output > ./public/styles.css

var flawless = new Flawless({
    filename: argv.i,
    paths: [
        './src/'
    ],
    compress: argv.c,
    sourceMap: true
})

function log() {
    if ( argv[ 'suppress-output' ] ) {
        return;
    }

    process.stdout.write( chalk.grey( '  [lesswatch] ' ) );
    console.log.apply( console, arguments );
}

function compile() {
    var input = fs.readFileSync( argv.i, {
        encoding: 'utf8'
    });

    flawless.compile( input, function( err, output ) {
        if ( err ) {
            return console.error( err );
        }

        var prefixed = autoprefixer.process( output.css ).css;

        fs.writeFileSync( argv.o, prefixed );
        log( chalk.green( 'write' ), argv.o );
    });

    // log( chalk.green( 'write' ), argv.o );
    // fs.createReadStream( argv.i )
    //     .pipe( flawless.on( 'error', function( err ) {
    //         console.log( err.stack );
    //     }) )
    //     .pipe( autoprefixer({
    //         browsers: [
    //             'last 2 version'
    //         ]
    //     }) )
    //     .pipe( fs.createWriteStream( argv.o ) );
}

compile();

var watcher = chokidar.watch( argv._ )
    .on( 'change', function( filepath ) {
        log( chalk.cyan( 'change' ), filepath );
        compile();
    })
    .on( 'ready', function() {
        var filepath = '';
        // List watched files
        Object.keys( watcher._watched ).forEach( function( key ) {
            Object.keys( watcher._watched[ key ]._items ).forEach( function( item ) {
                filepath = path.join( key, item );
                log( chalk.cyan( 'watch' ), filepath.replace( process.env.PWD + '/', '' ) );
            });
        });
    });
